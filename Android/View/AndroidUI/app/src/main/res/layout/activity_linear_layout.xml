<?xml version="1.0" encoding="utf-8"?>

<!-- 1. gravity 属性 -->
<!--<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical">

    <TextView android:id="@+id/TextView01"
        android:layout_width="match_parent"
        android:layout_height="35dp"
        android:text="top"
        android:gravity="top"
        android:textColor="#ffffff"
        android:background="#0000CC"
        android:layout_margin="1px"/>

    <TextView android:id="@+id/TextView02"
        android:layout_width="match_parent"
        android:layout_height="35dp"
        android:text="bottom"
        android:gravity="bottom"
        android:textColor="#ffffff"
        android:background="#0000CC"
        android:layout_margin="1px"/>

    <TextView android:id="@+id/TextView03"
        android:layout_width="match_parent"
        android:layout_height="35dp"
        android:text="left"
        android:gravity="left"
        android:textColor="#ffffff"
        android:background="#0000CC"
        android:layout_margin="1px"/>

    <TextView android:id="@+id/TextView04"
        android:layout_width="match_parent"
        android:layout_height="35dp"
        android:text="right"
        android:gravity="right"
        android:textColor="#ffffff"
        android:background="#0000CC"
        android:layout_margin="1px"/>

    <TextView android:id="@+id/TextView05"
        android:layout_width="match_parent"
        android:layout_height="35dp"
        android:text="center_vertical"
        android:gravity="center_vertical"
        android:textColor="#ffffff"
        android:background="#0000CC"
        android:layout_margin="1px"/>

    <TextView android:id="@+id/TextView06"
        android:layout_width="match_parent"
        android:layout_height="35dp"
        android:text="fill_vertical"
        android:gravity="fill_vertical"
        android:textColor="#ffffff"
        android:background="#0000CC"
        android:layout_margin="1px"/>

    <TextView android:id="@+id/TextView07"
        android:layout_width="match_parent"
        android:layout_height="35dp"
        android:text="center_horizontal"
        android:gravity="center_horizontal"
        android:textColor="#ffffff"
        android:background="#0000CC"
        android:layout_margin="1px"/>

    <TextView android:id="@+id/TextView08"
        android:layout_width="match_parent"
        android:layout_height="35dp"
        android:text="fill_horizontal"
        android:gravity="fill_horizontal"
        android:textColor="#ffffff"
        android:background="#0000CC"
        android:layout_margin="1px"/>

    <TextView android:id="@+id/TextView09"
        android:layout_width="match_parent"
        android:layout_height="35dp"
        android:text="center"
        android:gravity="center"
        android:textColor="#ffffff"
        android:background="#0000CC"
        android:layout_margin="1px"/>

    <TextView android:id="@+id/TextView10"
        android:layout_width="match_parent"
        android:layout_height="35dp"
        android:text="fill"
        android:gravity="fill"
        android:textColor="#ffffff"
        android:background="#0000CC"
        android:layout_margin="1px"/>

    <TextView android:id="@+id/TextView11"
        android:layout_width="match_parent"
        android:layout_height="35dp"
        android:text="clip_vertical"
        android:gravity="clip_vertical"
        android:textColor="#ffffff"
        android:background="#0000CC"
        android:layout_margin="1px"/>

    <TextView android:id="@+id/TextView12"
        android:layout_width="match_parent"
        android:layout_height="35dp"
        android:text="clip_horizontal"
        android:gravity="clip_horizontal"
        android:textColor="#ffffff"
        android:background="#0000CC"
        android:layout_margin="1px"/>
</LinearLayout>-->
<!-- 2. - 当 android:orientation="vertical" 时， android:layout_gravity只有水平方向的设置才起作用，
        垂直方向的设置不起作用。即：left，right，center_horizontal 是生效的。
       - 当 android:orientation="horizontal" 时， android:layout_gravity只有垂直方向的设置才起作用，
       水平方向的设置不起作用。即：top，bottom，center_vertical 是生效的。-->
<!--<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical">
    <TextView
        android:layout_width="100dip"
        android:layout_height="100dip"
        android:layout_gravity="bottom|center_horizontal"
        android:background="#00FF00"
        android:gravity="center|bottom"
        android:text="textView" />

    <Button
        android:layout_width="100dip"
        android:layout_height="100dip"
        android:layout_gravity="bottom|left"
        android:background="#FF0000"
        android:gravity="left|top"
        android:text="Button" />
</LinearLayout>-->
<!-- 3. baselineAligned 对齐 -->
<!--<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:baselineAligned="true"
    android:orientation="horizontal">
    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginRight="5dip"
        android:text="TextView" />
    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginRight="5dip"
        android:textSize="30sp"
        android:text="LargeTextView"/>
</LinearLayout>-->
<!-- 4. divider 分割线，只能用于垂直布局，属性值可以是shape文件、颜色、图片
    需要和 showDividers 结合使用
    android:showDividers = "middle|end|beginning|none"
        middle 在每一项中间添加分割线
        end 在整体的最后一项添加分割线
        beginning 在整体的最上方添加分割线
        none 无
    android:dividerPadding="5dp" 设置分隔线两端到边界的距离。
-->
<!--<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical"
    android:layout_marginTop="5dp"
    android:divider="@drawable/account_line"
    android:showDividers="middle|end|beginning"
    android:dividerPadding="5dp">
    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:textSize="30sp"
        android:text="first line" />
    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:textSize="30sp"
        android:text="second line"/>
    <TextView
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:textSize="30sp"
        android:text="third line"/>
</LinearLayout>-->

<!-- 5. android:measureWithLargestChild="true"
    该属性设为 true 时，所有带权重的子元素都会具有最大子元素的最小尺寸。
    会根据（最大尺寸的子元素 * 元素个数）计算 LinearLayout 的宽或者高。
    如果其中的子元素设置有 weight 属性，则会拥有最大子元素的尺寸。
    也就是把拥有 weight属性的元素变得和最大子元素一样宽或者高。
-->
<!--<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:background="@android:color/holo_blue_light"
    android:measureWithLargestChild="true"
    android:orientation="vertical">

    <Button
        android:id="@+id/button1"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_weight="1"
        android:text="Button22222" />

    <Button
        android:id="@+id/button2"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_weight="4"
        android:text="bddsfadddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddddsfddffffffffffffffffffffffffffffffffffffsfdf" />
</LinearLayout>-->

<!-- 6. layout_weight
    情况1： TextView 设置 width 为 wrap_content 这里我们看到三个 TextView 的
        宽度都被设置为了 wrap_content,layout_weight 值分别为 1、2、3
        这种情况下：首先系统会优先分配文字占用的空间，然后在把剩余的空间按照 1:2:3 分配。
        假设屏幕宽度为m,文字的宽度是n（例子里面文字的宽度是一致的）,那么，
        情况1 中 textview 的实际宽度比例为 n+1/6(m-3n),n+2/6(m-3n),n+3/6(m-3n)，所以比例显示比例不是 1:2:3
    情况2： TextView 设置 width 为 match_parent 第二种情况我们看到第三个 TextView 直接消失了，
        为什么会出现这种情况呢？
        第二种情况：系统首先会按照 match_parent 来分配文字空间，也就是占据整整一行空间，
        占了一行？那么后面的组件是如何显示的呢？其实这种情况和第一种的计算方式是一样的，
        也就是先分配空间，然后把剩余的空间按照 1:2:3 分配。
        假设屏幕宽度为m, 首先给组件分配空间，一个占据大小为 m ，然后把剩余空间按比例分配。那么，
        情况2 中 textview 的实际宽度比例为 m+1/6(m-3m),m+2/6(m-3m),m+3/6(m-3m) = m+(-2m/6),m+(-4m/6),m+(-6m/6) 计算可得
        2m/3,1m/3,0 也就是 2:1:0 所以现在知道了为什么第三个textView 会消失了。
    情况3： TextView 设置 width 为 0dp 这种情况下最终显示比例为 1:2:3.
        第三种情况： 其实所有情况我们都记住一个公式 先分配组件的空间，然后按比例分配剩余的空间。这个公式是通用的。
        假设屏幕宽度为m,首先给组件分配空间，也就是0dp，然后把剩下的空间按比例分配。那么情况3 中
        textView 实际宽度比例为 0 + 1/6(m - 0),0+2/6(m - 0),0+3/6(m-0) 也就是 1:2:3 情况3是最常用的。
    -->
<!--<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical">

    &lt;!&ndash; 情况1: TextView 设置 layout_width 为 wrap_content &ndash;&gt;
    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_marginTop="20dp"
        android:orientation="horizontal">

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:background="#77bc1f"
            android:text="AAA"
            android:textColor="#fff"
            android:textSize="23sp" />

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_weight="2"
            android:background="#06d992"
            android:text="BBB"
            android:textColor="#fff"
            android:textSize="23sp" />

        <TextView
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:layout_weight="3"
            android:background="#EEA32E"
            android:text="CCC"
            android:textColor="#fff"
            android:textSize="23sp" />
    </LinearLayout>

    &lt;!&ndash; 情况2: TextView 设置 layout_width 为 match_parent &ndash;&gt;
    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_marginTop="20dp"
        android:orientation="horizontal">

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:background="#77bc1f"
            android:text="AAA"
            android:textColor="#fff"
            android:textSize="23sp" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_weight="2"
            android:background="#06d992"
            android:text="BBB"
            android:textColor="#fff"
            android:textSize="23sp" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:layout_weight="3"
            android:background="#EEA32E"
            android:text="CCC"
            android:textColor="#fff"
            android:textSize="23sp" />
    </LinearLayout>

    &lt;!&ndash; 情况3: TextView 设置 layout_width 为 0dp &ndash;&gt;
    <LinearLayout
        android:layout_width="match_parent"
        android:layout_height="wrap_content"
        android:layout_marginTop="20dp"
        android:orientation="horizontal">

        <TextView
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="1"
            android:background="#77bc1f"
            android:text="AAA"
            android:textColor="#fff"
            android:textSize="23sp" />

        <TextView
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="2"
            android:background="#06d992"
            android:text="BBB"
            android:textColor="#fff"
            android:textSize="23sp" />

        <TextView
            android:layout_width="0dp"
            android:layout_height="wrap_content"
            android:layout_weight="3"
            android:background="#EEA32E"
            android:text="CCC"
            android:textColor="#fff"
            android:textSize="23sp" />
    </LinearLayout>
</LinearLayout>-->

<!-- 7. 这个属性是手动设所有定子View的weight和。如果这个weightSum的值小于所有子View的weight的和，
    那么会出现有的View消失了，也就是没有显示的空间了。所以一般weightSum会比所有weight的和大，
    这样能实现类似缩放的功能。
    下例中： weightSum = 8 大于weight 和 6所以我们的组件按照 1/8 2/8 3/8 相应的都变小了。-->
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
    android:layout_width="match_parent"
    android:layout_height="wrap_content"
    android:layout_marginTop="20dp"
    android:weightSum="8"
    android:gravity="right"
    android:orientation="horizontal">

    <TextView
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_weight="1"
        android:background="#77bc1f"
        android:text="AAA"
        android:textColor="#fff"
        android:textSize="23sp" />

    <TextView
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_weight="2"
        android:background="#06d992"
        android:text="BBB"
        android:textColor="#fff"
        android:textSize="23sp" />

    <TextView
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_weight="3"
        android:background="#EEA32E"
        android:text="CCC"
        android:textColor="#fff"
        android:textSize="23sp" />
</LinearLayout>