<?xml version="1.0" encoding="utf-8"?>

<!-- 1. 定位位置，指定那条边和那条边对齐 -->
<!--<android.support.constraint.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <Button
        android:id="@+id/a"
        android:layout_width="0dp"
        android:layout_height="0dp"
        android:background="@color/blue"
        android:text="A"
        app:layout_constraintHeight_percent="0.5"
        app:layout_constraintLeft_toLeftOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintWidth_default="percent"
        app:layout_constraintWidth_percent="0.5" />

    <Button
        android:id="@+id/b"
        android:layout_width="0dp"
        android:layout_height="0dp"
        android:background="@color/gray"
        android:text="B"
        app:layout_constraintHeight_percent="0.5"
        app:layout_constraintLeft_toRightOf="@id/a"
        app:layout_constraintTop_toTopOf="@id/a"
        app:layout_constraintWidth_default="percent"
        app:layout_constraintWidth_percent="0.5" />

    <Button
        android:id="@+id/c"
        android:layout_width="0dp"
        android:layout_height="0dp"
        android:background="@color/red"
        android:text="C"
        app:layout_constraintHeight_percent="0.5"
        app:layout_constraintLeft_toLeftOf="@id/a"
        app:layout_constraintTop_toBottomOf="@id/a"
        app:layout_constraintWidth_default="percent"
        app:layout_constraintWidth_percent="0.5" />

    <Button
        android:id="@+id/d"
        android:layout_width="0dp"
        android:layout_height="0dp"
        android:background="@color/blue"
        android:text="D"
        app:layout_constraintHeight_percent="0.5"
        app:layout_constraintWidth_percent="0.5"
        app:layout_constraintLeft_toRightOf="@id/a"
        app:layout_constraintTop_toTopOf="@id/c"
        app:layout_constraintWidth_default="percent"/>
</android.support.constraint.ConstraintLayout>-->
<!-- 2. margin 和 view gone
    (1). 设置 margin 还是用 layout_margin* 但是注意必须在这个方向上有约束，比如设置了 layout_margin_left
        则一定要有 layout_constraintLeft_* 才会生效
    (2). 设置了view gone 后布局会变成一个点，但是它的约束还是起作用
    (3). layout_goneMarginLeft 当锚点gone时这个属性会起作用-->
<!--<android.support.constraint.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <Button
        android:id="@+id/aa"
        android:layout_width="50dp"
        android:layout_height="30dp"
        android:layout_marginLeft="10dp"
        android:layout_marginTop="20dp"
        android:background="@color/blue"
        android:text="A"
        app:layout_constraintLeft_toLeftOf="parent"
        app:layout_constraintTop_toTopOf="parent" />

    <Button
        android:id="@+id/bb"
        android:layout_width="50dp"
        android:layout_height="30dp"
        android:layout_marginLeft="20dp"
        android:layout_marginTop="20dp"
        android:background="@color/blue"
        android:text="B"
        android:visibility="gone"
        app:layout_constraintLeft_toRightOf="@id/aa"
        app:layout_constraintTop_toTopOf="@id/aa" />

    <Button
        android:id="@+id/cc"
        android:layout_width="50dp"
        android:layout_height="30dp"
        android:layout_marginLeft="20dp"
        android:layout_marginTop="20dp"
        android:background="@color/blue"
        android:text="C"
        app:layout_constraintLeft_toRightOf="@id/bb"
        app:layout_constraintTop_toTopOf="@id/bb"
        app:layout_goneMarginLeft="50dp" />
</android.support.constraint.ConstraintLayout>-->
<!-- 3.居中及 bias
        同时设置 left 和 right的约束就可以居中
        使用 bias 设置偏移量 值为 0 -1 -->
<!--<android.support.constraint.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <Button
        android:id="@+id/aa"
        android:layout_width="50dp"
        android:layout_height="30dp"
        android:text="A"
        app:layout_constraintLeft_toLeftOf="parent"
        app:layout_constraintRight_toRightOf="parent"
        app:layout_constraintHorizontal_bias="0.33"/>
</android.support.constraint.ConstraintLayout>-->

<!-- 4. View 的尺寸：
     0dp在constraint可不是指大小是0dp，而是有特殊含义的。他的作用会随着不同的 layout_constraintWidth_default 设置有不同的含义:
     spread  percent  wrap

     layout_constraintDimensionRatio 宽高成一定比例。

     设置最大最小值
    layout_constraintWidth_min
    layout_constraintWidth_max
    layout_constraintHeight_max
    layout_constraintHeight_min
    -->
<!--<android.support.constraint.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent">
    &lt;!&ndash; 第一种:默认值 spread.
        width 设置 0 dp 宽度占据所有符合约束的空间&ndash;&gt;
    <Button
        android:id="@+id/aa"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:text="A"
        app:layout_constraintLeft_toLeftOf="parent"
        app:layout_constraintRight_toRightOf="parent"/>
    &lt;!&ndash; 第二种：percent
        width 按照父布局的百分比设置,需要layout_constraintWidth_percent设置百分比例&ndash;&gt;
    <Button
        android:id="@+id/bb"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:text="B"
        app:layout_constraintTop_toBottomOf="@id/aa"
        app:layout_constraintLeft_toLeftOf="parent"
        app:layout_constraintRight_toRightOf="parent"
        app:layout_constraintWidth_default="percent"
        app:layout_constraintHorizontal_bias="0.33"
        app:layout_constraintWidth_percent="0.3"/>
    &lt;!&ndash;第三种：wrap
        意思匹配内容大小但不超过约束限制，注意和直接指定宽度为wrap_content的区别就是不超过约束限制
        注意：对于wrap_content会超过约束限制，谷歌又新增了如下属性
            app:layout_constrainedWidth=”true|false”
            app:layout_constrainedHeight=”true|false”
         设置了这个属性后 wrap_content 就和 wrap 效果一样了，适配内容也不会超过约束限制
        &ndash;&gt;
    <android.support.constraint.ConstraintLayout
        app:layout_constraintTop_toBottomOf="@id/bb"
        android:layout_width="match_parent"
        android:layout_height="wrap_content">

        <Button
            android:id="@+id/aaa"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:background="@color/red"
            android:text="A"
            app:layout_constraintLeft_toLeftOf="parent" />

        <Button
            android:id="@+id/ccc"
            android:layout_width="wrap_content"
            android:layout_height="wrap_content"
            android:background="@color/red"
            android:text="C"
            app:layout_constraintRight_toRightOf="parent" />

        <Button
            android:id="@+id/bbb"
            android:layout_width="0dp"
            android:layout_height="20dp"
            android:background="@color/blue"
            app:layout_constraintWidth_max="50dp"
            android:text="ffAAAAAAAAAAAAAAAAAAAAAAAAACC"
            app:layout_constraintLeft_toRightOf="@id/aaa"
            app:layout_constraintRight_toLeftOf="@id/ccc"
            app:layout_constraintWidth_default="wrap" />
        &lt;!&ndash; layout_constraintDimensionRatio 指定宽高成一定的比例
            注意：使用该属性时宽和高其中有一项为0dp，有constraint

            如果只有一项为0dp，则该项值按照比例计算出来。比如高为20dp，宽为0dp，radio为"2:1",则最终宽为40dp

            如果两项都为0dp，则尺寸会设置为满足约束的最大值并保持比例。因为这是系统计算的，
            有的时候不是我们想要的，我们也可以通过在前面加H、W来指定是哪一个边需要计算。
            例如"H,2:1",则是指宽度匹配约束，高度是宽度的1/2
            &ndash;&gt;
        <Button
            android:id="@+id/ddd"
            android:layout_width="wrap_content"
            android:layout_height="0dp"
            app:layout_constraintDimensionRatio="8:1"
            android:text="ffAAAAAAAAAAAAAAAAAAAAAAAAACC"
            app:layout_constraintLeft_toRightOf="@id/aaa"
            app:layout_constraintRight_toLeftOf="@id/ccc"
            app:layout_constraintTop_toBottomOf="@id/bbb" />

    </android.support.constraint.ConstraintLayout>
</android.support.constraint.ConstraintLayout>-->

<!--5. layout_constraintHorizontal_chainStyle 来控制链的分布，共有三个取值，可更改值查看效果
    （1）spread
    （2）spread_inside
    （3）packed
    特别注意： layout_constraintHorizontal_chainStyle 属性需要写在一条链的第一个上面-->
<!--
<android.support.constraint.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="wrap_content">

    <Button
        android:id="@+id/aaaa"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        app:layout_constraintLeft_toLeftOf="parent"
        app:layout_constraintRight_toLeftOf="@id/bbbb"
        android:text="A"
        android:background="@color/blue"
        app:layout_constraintHorizontal_chainStyle="spread_inside"/>

    <Button
        android:id="@+id/bbbb"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        app:layout_constraintLeft_toRightOf="@id/aaaa"
        app:layout_constraintRight_toLeftOf="@id/cccc"
        android:text="B"
        android:background="@color/red"/>

    <Button
        android:id="@+id/cccc"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        app:layout_constraintLeft_toRightOf="@id/bbbb"
        app:layout_constraintRight_toRightOf="parent"
        android:text="C"
        android:background="@color/green"/>
</android.support.constraint.ConstraintLayout>-->

<!-- 6.layout_constraintHorizontal_weight 权重的使用
    和LinearLayout一样，链也可以使用layout_constraintHorizontal_weight，来分割剩余空间。
    但又和android:layout_weight不太一样，不一样的地方如下：
        (1)layout_weight ，不管当前view的大小设的是多大(也就是说不管是设置了0dp 还是 wrap_content
            或者 match_parent)，都会继续占据剩余空间.
        (2)layout_constraintHorizontal_weight，这个只对0dp并且layout_constraintWidth_default为spread
        的view生效，使其大小按比例分割剩余空间，对于已经设定大小的view不生效,请看下面效果，只有第一个
        视图的大小改变了
-->
<!--<android.support.constraint.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="wrap_content">

    <Button
        android:id="@+id/aaaa"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        app:layout_constraintLeft_toLeftOf="parent"
        app:layout_constraintRight_toLeftOf="@id/bbbb"
        app:layout_constraintHorizontal_weight="1"
        android:text="A"
        android:background="@color/blue"
        app:layout_constraintHorizontal_chainStyle="spread"/>

    <Button
        android:id="@+id/bbbb"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        app:layout_constraintLeft_toRightOf="@id/aaaa"
        app:layout_constraintRight_toLeftOf="@id/cccc"
        android:text="B"
        android:background="@color/red"/>

    <Button
        android:id="@+id/cccc"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        app:layout_constraintLeft_toRightOf="@id/bbbb"
        app:layout_constraintRight_toRightOf="parent"
        android:text="C"
        android:background="@color/green"/>
</android.support.constraint.ConstraintLayout>-->

<!--
   7.圆形布局
    layout_constraintCircle : 圆心，值是某个view的id
    layout_constraintCircleRadius : 半径
    layout_constraintCircleAngle ：角度，值是从0-360，0是指整上方
-->
<!--<android.support.constraint.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent">
    <Button
        android:id="@+id/a"
        android:layout_width="50dp"
        android:layout_height="50dp"
        app:layout_constraintEnd_toEndOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintBottom_toBottomOf="parent"
        android:text="A"
        android:background="@color/green"/>

    <Button
        android:id="@+id/b"
        android:layout_width="50dp"
        android:layout_height="50dp"
        app:layout_constraintCircle="@id/a"
        app:layout_constraintCircleAngle="300"
        app:layout_constraintCircleRadius="100dp"
        android:text="B"
        android:background="@color/red"/>

    <Button
        android:id="@+id/c"
        android:layout_width="50dp"
        android:layout_height="50dp"
        app:layout_constraintCircle="@id/a"
        app:layout_constraintCircleAngle="45"
        app:layout_constraintCircleRadius="100dp"
        android:text="C"
        android:background="@color/blue"/>
</android.support.constraint.ConstraintLayout>-->

<!-- 8.辅助组件 GuideLine
    即参考线的意思，有水平参考线和竖直参考线两种。他的作用就像是一个虚拟的参考线，
    只是用来方便其他View以他为锚点来布局。
    他的位置的确定是由下面三个属性之一来确定的：
        layout_constraintGuide_begin：距离父布局的左边或者上边多大距离
        layout_constraintGuide_end:距离父布局的右边或者下边多大距离
        layout_constraintGuide_percent：百分比，0~1，距离父布局的左边或者上边占父布局的比例
    -->
<!--<android.support.constraint.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <android.support.constraint.Guideline
        android:id="@+id/guideline"
        android:layout_height="wrap_content"
        android:layout_width="wrap_content"
        android:orientation="vertical"
        app:layout_constraintGuide_percent="0.33" />

    <android.support.constraint.Guideline
        android:id="@+id/guideline2"
        android:layout_height="wrap_content"
        android:layout_width="wrap_content"
        android:orientation="horizontal"
        app:layout_constraintGuide_begin="130dp" />

    <Button
        android:layout_height="wrap_content"
        android:layout_width="wrap_content"
        android:text="GuideLine"
        app:layout_constraintLeft_toLeftOf="@id/guideline"
        app:layout_constraintTop_toTopOf="@id/guideline2" />
</android.support.constraint.ConstraintLayout>-->

<!-- 9.辅助组件 Group
    Group是一个可以同时控制多个view 可见性的虚拟View
    第一个Group通过app:constraint_referenced_ids指定了a、c两个控件，这样当该Group可见性为invisible时
    ，a、c的可见性都会变为invisible，为gone则都为gone。所以Group很适合处理有网无网之类的场景，
    不再需要像之前那样一个一个view控制可见性，通过Group就可以统一处理了。
Group有一些注意事项：
    xml中，可见性配置的优先级：Group优先于View，下层Group优先于上层。
    Group只可以引用当前ConstraintLayout下的View，子Layout 下的View不可以。
    app:constraint_referenced_ids里直接写的是id的字符串，
        初始化后会通过getIdentifier来反射查找叫该名字的id。
        所以如果你的项目用了类似AndResGuard的混淆id名字的功能，
        切记不要混淆app:constraint_referenced_ids里的id，否则在release版本就会因找不到该id而失效。
        或者也可以通过代码setReferencedIds来设置id。
    -->
<!--<android.support.constraint.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <android.support.constraint.Group
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:visibility="invisible"
        app:constraint_referenced_ids="a,c" />

    <android.support.constraint.Group
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:visibility="visible"
        app:constraint_referenced_ids="b,d" />

    <Button
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="a"
        android:id="@+id/a"/>

    <Button
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        app:layout_constraintTop_toBottomOf="@id/a"
        android:text="b"
        android:id="@+id/b"/>

    <Button
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        app:layout_constraintTop_toBottomOf="@id/b"
        android:text="c"
        android:id="@+id/c"/>

    <Button
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        app:layout_constraintTop_toBottomOf="@id/c"
        android:text="d"
        android:id="@+id/d"/>
</android.support.constraint.ConstraintLayout>-->

<!-- 10. 辅助组件 Placeholder 占位布局
        他自己本身不会绘制任何内容，但他可以通过设置app:content="id"，将 id View 的内容绘制到自己
        的位置上，而原id的 View 就像 gone 了一样

        可以看到，原本 B 是位于 A 的右边并且顶部对齐的，但因为 A 被 Placeholder 引用，使 A
        相当于 Gone 了。而 Placeholder 的位置则显示了 A 的内容，并且大小也和 A 相符，
        Placeholder 的大小设置并没有生效。
        -->
<!--
<android.support.constraint.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent">
    <Button
        android:id="@+id/a"
        android:layout_width="50dp"
        android:layout_height="50dp"
        android:layout_marginLeft="30dp"
        android:text="a"
        app:layout_constraintLeft_toLeftOf="parent"
        app:layout_constraintTop_toTopOf="parent" />

    <Button
        android:id="@+id/b"
        android:layout_width="50dp"
        android:layout_height="50dp"
        android:layout_marginLeft="20dp"
        android:text="b"
        app:layout_constraintLeft_toRightOf="@+id/a"
        app:layout_constraintTop_toTopOf="@+id/a" />

    <android.support.constraint.Placeholder
        android:id="@+id/place"
        android:layout_width="500dp"
        android:layout_height="500dp"
        app:content="@+id/a"
        app:layout_constraintBottom_toBottomOf="parent"
        app:layout_constraintLeft_toLeftOf="parent"/>

    <Button
        android:layout_width="50dp"
        android:layout_height="50dp"
        android:text="c"
        app:layout_constraintBottom_toBottomOf="@+id/place"
        app:layout_constraintLeft_toRightOf="@+id/place" />
</android.support.constraint.ConstraintLayout>
-->

<!-- 11. 辅助组件 Barrier 用法1：
        屏障，一个虚拟View，主要解决需要多个参考锚点的问题
        比如下面的布局，一个Button在两个 textview的右边，此时如果 textview的内容长度变化，
        如 Button 参考 textView1 但是 textView2 内容变长了，就会显示到 Button上去
        所以我们需要一个动态参考较长的 TextView的锚点，Barrier就可以同时参考多个组件-->
<!--
<android.support.constraint.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <TextView
        android:id="@+id/textView"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginStart="8dp"
        android:layout_marginTop="8dp"
        android:text="TextViewxxxxx"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toTopOf="parent" />

    <TextView
        android:id="@+id/textView2"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginStart="8dp"
        android:layout_marginTop="8dp"
        android:text="TextView"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintTop_toBottomOf="@+id/textView" />
    <android.support.constraint.Barrier
        android:id="@+id/barrier"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        app:barrierDirection="end"
        app:constraint_referenced_ids="textView,textView2" />
    <Button
        android:id="@+id/button"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:layout_marginStart="8dp"
        android:layout_marginTop="8dp"
        android:text="Button"
        app:layout_constraintStart_toEndOf="@+id/barrier"
        app:layout_constraintTop_toTopOf="parent" />
</android.support.constraint.ConstraintLayout>
-->
<!-- 11. 辅助组件 Barrier 用法2
        如果参考的view gone了，Barrier 可以使用 barrierAllowsGoneWidgets 不去管 gone的view
        只参考存在的view
        下面的例子中： A 设置为了 gone（margin会失效） ，默认情况下 C 会和布局的顶部对齐
        如果设置了 barrierAllowsGoneWidgets 为 false 则 Barrier 只会参考 B组件，C也就会和 B顶部对齐-->
<android.support.constraint.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    android:layout_width="match_parent"
    android:layout_height="match_parent">
    <Button
        android:id="@+id/a"
        android:layout_width="40dp"
        android:layout_height="100dp"
        app:layout_constraintTop_toTopOf="parent"
        android:layout_marginTop="20dp"
        android:background="@color/red"
        android:text="A"
        android:visibility="gone"/>

    <Button
        android:id="@+id/b"
        android:layout_width="40dp"
        android:layout_height="100dp"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintLeft_toRightOf="@id/a"
        android:layout_marginLeft="20dp"
        android:background="@color/blue"
        android:text="B"
        android:layout_marginTop="40dp"/>

    <android.support.constraint.Barrier
        android:id="@+id/barrier2"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        app:barrierDirection="top"
        app:barrierAllowsGoneWidgets="false"
        app:constraint_referenced_ids="a,b" />

    <Button
        android:id="@+id/c"
        android:layout_width="100dp"
        android:layout_height="100dp"
        app:layout_constraintLeft_toRightOf="@id/b"
        android:layout_marginLeft="20dp"
        app:layout_constraintTop_toTopOf="@+id/barrier2"
        android:text="C"
        android:background="@color/green"/>
</android.support.constraint.ConstraintLayout>